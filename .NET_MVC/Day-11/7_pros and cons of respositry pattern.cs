using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace .NET_MVC.Day-11
{
    public class 7_pros and cons of respositry pattern
    {
        
    }
}
------------------------------------------
Repository pattern ek common architectural pattern hai jo data access logic ko encapsulate karta hai, so that aapka business logic (Service layer) data source se loosely coupled ho.

‚úÖ Pros (Advantages) of Repository Pattern
1Ô∏è‚É£ Separation of Concerns (SoC)
Business logic (Service Layer) aur Data access logic (Repository) ko separate karta hai.

Maintainable code structure.
----------------------------------------------------------
2Ô∏è‚É£ Unit Testing Friendly
Repositories ko mock karke easily test likh sakte ho.


var mockRepo = new Mock<IProductRepository>();
3Ô∏è‚É£ Loose Coupling
Service ya Controller ko DB context ka direct access nahi dena padta.
--------------------------------------------
4Ô∏è‚É£ Centralized Data Logic
Data access logic ek hi jagah rehta hai ‚Üí Consistent queries, no duplication.
----------------------------------------------
5Ô∏è‚É£ Multiple Data Sources Support
Repository se data SQL DB, NoSQL, CSV, JSON, etc. kisi bhi source se fetch kiya ja sakta hai.
----------------------------------------------
6Ô∏è‚É£ Domain Driven Design (DDD) Friendly
Repository ek aggregate root ki tarah kaam karta hai, perfect fit for DDD approach.
---------------------------------------------
‚ùå Cons (Disadvantages) of Repository Pattern
1Ô∏è‚É£ Over-Engineering for Simple Apps
Chhoti applications ke liye unnecessary complexity introduce karta hai.
-----------------------------------------------
2Ô∏è‚É£ Extra Layer = More Code
Repository + Interface + Service = More files = More boilerplate.
------------------------------------------
3Ô∏è‚É£ Duplication with EF Core
EF Core khud ek repository/UnitOfWork jaisa kaam karta hai. Toh custom repository kabhi-kabhi redundant lagta hai.
---------------------------------------------
4Ô∏è‚É£ Query Limitations
Complex queries ke liye har method ko expose karna padta hai. Custom methods banana padta hai.


Task<List<Product>> GetProductsWithDiscountAsync();
------------------------------------------
5Ô∏è‚É£ Can Hide EF Features
Advanced EF features like .Include, .ThenInclude, .AsSplitQuery() hide ho jaate hain abstraction me.
-----------------------------------
üß† When To Use?
‚úÖ Large applications
‚úÖ Domain-Driven Design
‚úÖ You want testability
‚úÖ Multiple data sources
‚úÖ Clean architecture
-----------------------------------------------
üö´ When NOT To Use?
‚ùå Simple CRUD apps
‚ùå EF Core-only minimal APIs
‚ùå When performance is critical and abstraction slows things down

